{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Scarpet",
  "fileTypes": [
    ".sc",
    ".scl"
  ],
  "scopeName": "source.scarpet",
  "patterns": [
    {
      "include": "#expression"
    }
  ],
  "repository": {
    "expression": {
      "comment": "anything is an expression in scarpet",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#functions"
        },
        {
          "include": "#variables"
        }
      ]
    },
    "comments": {
      "comment": "double-slash single line comments",
      "name": "comment.line.double-slash",
      "match": "(//).*$",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.scarpet"
        }
      }
    },
    "constants": {
      "patterns": [
        {
          "comment": "boolean constants",
          "name": "constant.language.bool.scarpet",
          "match": "\\b(true|false)\\b"
        },
        {
          "comment": "language constants",
          "name": "constant.language.scarpet",
          "match": "\\bnull\\b"
        },
        {
          "comment": "numeric constants",
          "name": "constant.language.numeric.scarpet",
          "match": "\\b(pi|euler)\\b"
        },
        {
          "name": "constant.numeric.hex.scarpet",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "comment": "decimal numeric constants",
          "name": "constant.numeric.decimal.scarpet",
          "match": "\\b\\d+(?:(\\.)\\d+)?(?:(E|e)([+-]?)(\\d+))?",
          "captures": {
            "1": {
              "name": "punctuation.separator.dot.decimal.scarpet"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "control flow keywords (functions)",
          "match": "\\b(break|c_for|call|continue|exit|for|if|loop|outer|return|then|throw|try|undef|vars?|while)\\s*(\\()",
          "captures": {
            "1": {
              "name": "keyword.control.scarpet"
            },
            "2": {
              "name": "punctuation.brackets.round.scarpet"
            }
          }
        },
        {
          "match": "\\b(import)\\s*(\\()",
          "captures": {
            "1": {
              "name": "keyword.control.import.scarpet"
            },
            "2": {
              "name": "punctuation.brackets.round.scarpet"
            }
          }
        },
        {
          "match": "\\b(type|bool|number|str|l|m)\\s*(\\()",
          "captures": {
            "1": {
              "name": "keyword.other.type.scarpet"
            },
            "2": {
              "name": "punctuation.brackets.round.scarpet"
            }
          }
        },
        {
          "name": "keyword.operator.arrow.scarpet",
          "match": "->"
        },
        {
          "name": "keyword.operator.spread.scarpet",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.arithmetic.scarpet",
          "match": "\\+|\\-|\\*|/|%|\\^"
        },
        {
          "match": "\\b(sum|difference|product|quotient)\\s*(\\()",
          "captures": {
            "1": {
              "name": "keyword.operator.arithmetic.scarpet"
            },
            "2": {
              "name": "punctuation.brackets.round.scarpet"
            }
          }
        },
        {
          "name": "keyword.operator.comparison.scarpet",
          "match": "(==|\\!=|<|>|<=|>=)"
        },
        {
          "match": "\\b(equal|unique|increasing|decreasing|nonincreasing|nondecreasing)\\s*(\\()",
          "captures": {
            "1": {
              "name": "keyword.operator.comparison.scarpet"
            },
            "2": {
              "name": "punctuation.brackets.round.scarpet"
            }
          }
        },
        {
          "name": "keyword.operator.logical.scarpet",
          "match": "(&&|\\|\\||\\!)"
        },
        {
          "match": "\\b(and|or|not)\\s*(\\()",
          "captures": {
            "1": {
              "name": "keyword.operator.logical.scarpet"
            },
            "2": {
              "name": "punctuation.brackets.round.scarpet"
            }
          }
        },
        {
          "name": "keyword.operator.assignment.scarpet",
          "match": "(=|<>|\\+=)"
        },
        {
          "comment": "bitwise operators only functions",
          "match": "\\b(bitwise_and|bitwise_xor|bitwise_or|bitwise_shift_left|bitwise_shift_right|bitwise_arithmetic_shift_right|bitwise_roll_left|bitwise_roll_right|bitwise_not|bitwise_popcount|double_to_long_bits|long_to_double_bits)\\s*(\\()",
          "captures": {
            "1": {
              "name": "keyword.operator.bitwise.scarpet"
            },
            "2": {
              "name": "punctuation.brackets.round.scarpet"
            }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "comment": "not highlighting parameters as it would be too difficult to do considering edge cases like function declarations inside maps",
          "begin": "\\b(\\w+)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.scarpet"
            },
            "2": {
              "name": "punctuation.brackets.round.scarpet"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.round.scarpet"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "comment": "global variables",
          "name": "variable.name.scarpet",
          "match": "\\bglobal_\\w*\\b"
        },
        {
          "comment": "variables",
          "name": "variable.other.scarpet",
          "match": "\\b\\w+\\b"
        }
      ]
    }
  }
}
